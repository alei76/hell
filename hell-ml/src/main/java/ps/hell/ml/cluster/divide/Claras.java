package ps.hell.ml.cluster.divide;

/**
 * 为了提高PAM和CLARAN算法的聚类质量，有人在CLARAN算法的
 * 基础上提出了CLARANS算法。与CLARAN相比，最大的区别在于
 * 没有一个时刻算法局限于固定的一个样本中，自始自终，算法
 * 的样本数据都是随机抽样的。其算法过程如下。将每套k个中
 * 值点作为一个节点，若两个节点之间有k-1个点相同，则成为
 * 邻居。用户事先指定两个数，一是最大的邻居数，二是最大的
 * 局部最优点数。算法随机选取一个当前点，随机地取出其中的
 * 一个邻居，看目标值是否有改进，如果有改进，则用邻居替代
 * 当前点，重新开始搜索邻居的过程；若抽取了最大邻居数的邻
 * 居，发现当前点最优，那么就找到了一个局部最优点。找到一
 * 个局部最优点后，再随机抽取一个当前点，进行上面的过程，
 * 直到找到了用户指定最大数量的局部最优点。比较每个局部最
 * 优点的目标值，取最优的那个点作为结果，即可得到k个中值点
 * ，于是k个类就可以轻松得到。CLARANS算法的效果不错，但算
 * 法复杂度更高。
 * @author Administrator
 *
 */
public class Claras {

}
